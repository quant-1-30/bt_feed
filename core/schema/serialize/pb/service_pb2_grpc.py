# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
# import service_pb2 as service__pb2
from . import service_pb2 as service__pb2


class btSimulatorStub(object):
    """api

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalendarCall = channel.unary_unary(
                '/btSimulator/CalendarCall',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.Calendar.FromString,
                )
        self.InstrumentCall = channel.unary_unary(
                '/btSimulator/InstrumentCall',
                request_serializer=service__pb2.QuoteRequest.SerializeToString,
                response_deserializer=service__pb2.InstFrame.FromString,
                )
        self.DatasetStreamCall = channel.unary_stream(
                '/btSimulator/DatasetStreamCall',
                request_serializer=service__pb2.QuoteRequest.SerializeToString,
                response_deserializer=service__pb2.TickerFrame.FromString,
                )
        self.AdjustmentStreamCall = channel.unary_stream(
                '/btSimulator/AdjustmentStreamCall',
                request_serializer=service__pb2.QuoteRequest.SerializeToString,
                response_deserializer=service__pb2.AdjFrame.FromString,
                )
        self.RightStreamCall = channel.unary_stream(
                '/btSimulator/RightStreamCall',
                request_serializer=service__pb2.QuoteRequest.SerializeToString,
                response_deserializer=service__pb2.RightmentFrame.FromString,
                )
        self.OrderStreamCall = channel.unary_stream(
                '/btSimulator/OrderStreamCall',
                request_serializer=service__pb2.TradeRequest.SerializeToString,
                response_deserializer=service__pb2.OrderFrame.FromString,
                )
        self.TransactionStreamCall = channel.unary_stream(
                '/btSimulator/TransactionStreamCall',
                request_serializer=service__pb2.TradeRequest.SerializeToString,
                response_deserializer=service__pb2.TransactionFrame.FromString,
                )
        self.ExperimentStreamCall = channel.unary_stream(
                '/btSimulator/ExperimentStreamCall',
                request_serializer=service__pb2.TradeRequest.SerializeToString,
                response_deserializer=service__pb2.Experiment.FromString,
                )
        self.AccountStreamCall = channel.unary_stream(
                '/btSimulator/AccountStreamCall',
                request_serializer=service__pb2.TradeRequest.SerializeToString,
                response_deserializer=service__pb2.AccountFrame.FromString,
                )
        self.PersistStreamCall = channel.stream_stream(
                '/btSimulator/PersistStreamCall',
                request_serializer=service__pb2.PersistRequest.SerializeToString,
                response_deserializer=service__pb2.Status.FromString,
                )


class btSimulatorServicer(object):
    """api

    """

    def CalendarCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InstrumentCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DatasetStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustmentStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RightStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExperimentStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountStreamCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PersistStreamCall(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_btSimulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalendarCall': grpc.unary_unary_rpc_method_handler(
                    servicer.CalendarCall,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=service__pb2.Calendar.SerializeToString,
            ),
            'InstrumentCall': grpc.unary_unary_rpc_method_handler(
                    servicer.InstrumentCall,
                    request_deserializer=service__pb2.QuoteRequest.FromString,
                    response_serializer=service__pb2.InstFrame.SerializeToString,
            ),
            'DatasetStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.DatasetStreamCall,
                    request_deserializer=service__pb2.QuoteRequest.FromString,
                    response_serializer=service__pb2.TickerFrame.SerializeToString,
            ),
            'AdjustmentStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.AdjustmentStreamCall,
                    request_deserializer=service__pb2.QuoteRequest.FromString,
                    response_serializer=service__pb2.AdjFrame.SerializeToString,
            ),
            'RightStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.RightStreamCall,
                    request_deserializer=service__pb2.QuoteRequest.FromString,
                    response_serializer=service__pb2.RightmentFrame.SerializeToString,
            ),
            'OrderStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.OrderStreamCall,
                    request_deserializer=service__pb2.TradeRequest.FromString,
                    response_serializer=service__pb2.OrderFrame.SerializeToString,
            ),
            'TransactionStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.TransactionStreamCall,
                    request_deserializer=service__pb2.TradeRequest.FromString,
                    response_serializer=service__pb2.TransactionFrame.SerializeToString,
            ),
            'ExperimentStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.ExperimentStreamCall,
                    request_deserializer=service__pb2.TradeRequest.FromString,
                    response_serializer=service__pb2.Experiment.SerializeToString,
            ),
            'AccountStreamCall': grpc.unary_stream_rpc_method_handler(
                    servicer.AccountStreamCall,
                    request_deserializer=service__pb2.TradeRequest.FromString,
                    response_serializer=service__pb2.AccountFrame.SerializeToString,
            ),
            'PersistStreamCall': grpc.stream_stream_rpc_method_handler(
                    servicer.PersistStreamCall,
                    request_deserializer=service__pb2.PersistRequest.FromString,
                    response_serializer=service__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'btSimulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class btSimulator(object):
    """api

    """

    @staticmethod
    def CalendarCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/btSimulator/CalendarCall',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            service__pb2.Calendar.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InstrumentCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/btSimulator/InstrumentCall',
            service__pb2.QuoteRequest.SerializeToString,
            service__pb2.InstFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DatasetStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/DatasetStreamCall',
            service__pb2.QuoteRequest.SerializeToString,
            service__pb2.TickerFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdjustmentStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/AdjustmentStreamCall',
            service__pb2.QuoteRequest.SerializeToString,
            service__pb2.AdjFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RightStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/RightStreamCall',
            service__pb2.QuoteRequest.SerializeToString,
            service__pb2.RightmentFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/OrderStreamCall',
            service__pb2.TradeRequest.SerializeToString,
            service__pb2.OrderFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/TransactionStreamCall',
            service__pb2.TradeRequest.SerializeToString,
            service__pb2.TransactionFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExperimentStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/ExperimentStreamCall',
            service__pb2.TradeRequest.SerializeToString,
            service__pb2.Experiment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountStreamCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/btSimulator/AccountStreamCall',
            service__pb2.TradeRequest.SerializeToString,
            service__pb2.AccountFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PersistStreamCall(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/btSimulator/PersistStreamCall',
            service__pb2.PersistRequest.SerializeToString,
            service__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
