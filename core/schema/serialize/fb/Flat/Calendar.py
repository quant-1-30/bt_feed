# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Calendar(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Calendar()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCalendar(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Calendar
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Calendar
    def TzInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Calendar
    def Date(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Calendar
    def DateAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Calendar
    def DateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Calendar
    def DateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def CalendarStart(builder):
    builder.StartObject(2)

def Start(builder):
    CalendarStart(builder)

def CalendarAddTzInfo(builder, tzInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tzInfo), 0)

def AddTzInfo(builder, tzInfo):
    CalendarAddTzInfo(builder, tzInfo)

def CalendarAddDate(builder, date):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def AddDate(builder, date):
    CalendarAddDate(builder, date)

def CalendarStartDateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDateVector(builder, numElems: int) -> int:
    return CalendarStartDateVector(builder, numElems)

def CalendarEnd(builder):
    return builder.EndObject()

def End(builder):
    return CalendarEnd(builder)
