# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Line(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Line()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Line
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Line
    def Sid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Line
    def Open(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Line
    def High(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Line
    def Low(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Line
    def Close(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Line
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Line
    def Amount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LineStart(builder):
    builder.StartObject(7)

def Start(builder):
    LineStart(builder)

def LineAddSid(builder, sid):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sid), 0)

def AddSid(builder, sid):
    LineAddSid(builder, sid)

def LineAddOpen(builder, open):
    builder.PrependInt32Slot(1, open, 0)

def AddOpen(builder, open):
    LineAddOpen(builder, open)

def LineAddHigh(builder, high):
    builder.PrependInt32Slot(2, high, 0)

def AddHigh(builder, high):
    LineAddHigh(builder, high)

def LineAddLow(builder, low):
    builder.PrependInt32Slot(3, low, 0)

def AddLow(builder, low):
    LineAddLow(builder, low)

def LineAddClose(builder, close):
    builder.PrependInt32Slot(4, close, 0)

def AddClose(builder, close):
    LineAddClose(builder, close)

def LineAddVolume(builder, volume):
    builder.PrependInt32Slot(5, volume, 0)

def AddVolume(builder, volume):
    LineAddVolume(builder, volume)

def LineAddAmount(builder, amount):
    builder.PrependInt32Slot(6, amount, 0)

def AddAmount(builder, amount):
    LineAddAmount(builder, amount)

def LineEnd(builder):
    return builder.EndObject()

def End(builder):
    return LineEnd(builder)
