# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Instrument(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Instrument()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstrument(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Instrument
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Instrument
    def Sid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Instrument
    def Region(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Instrument
    def FirstTrading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Instrument
    def Delist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def InstrumentStart(builder):
    builder.StartObject(4)

def Start(builder):
    InstrumentStart(builder)

def InstrumentAddSid(builder, sid):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sid), 0)

def AddSid(builder, sid):
    InstrumentAddSid(builder, sid)

def InstrumentAddRegion(builder, region):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(region), 0)

def AddRegion(builder, region):
    InstrumentAddRegion(builder, region)

def InstrumentAddFirstTrading(builder, firstTrading):
    builder.PrependInt32Slot(2, firstTrading, 0)

def AddFirstTrading(builder, firstTrading):
    InstrumentAddFirstTrading(builder, firstTrading)

def InstrumentAddDelist(builder, delist):
    builder.PrependInt32Slot(3, delist, 0)

def AddDelist(builder, delist):
    InstrumentAddDelist(builder, delist)

def InstrumentEnd(builder):
    return builder.EndObject()

def End(builder):
    return InstrumentEnd(builder)
