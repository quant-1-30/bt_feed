# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Rights(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Rights()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRights(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Rights
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Rights
    def Sid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Rights
    def RegisterData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Rights
    def ExDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Rights
    def EffectiveDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Rights
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Rights
    def Ratio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def RightsStart(builder):
    builder.StartObject(6)

def Start(builder):
    RightsStart(builder)

def RightsAddSid(builder, sid):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sid), 0)

def AddSid(builder, sid):
    RightsAddSid(builder, sid)

def RightsAddRegisterData(builder, registerData):
    builder.PrependInt32Slot(1, registerData, 0)

def AddRegisterData(builder, registerData):
    RightsAddRegisterData(builder, registerData)

def RightsAddExDate(builder, exDate):
    builder.PrependInt32Slot(2, exDate, 0)

def AddExDate(builder, exDate):
    RightsAddExDate(builder, exDate)

def RightsAddEffectiveDate(builder, effectiveDate):
    builder.PrependInt32Slot(3, effectiveDate, 0)

def AddEffectiveDate(builder, effectiveDate):
    RightsAddEffectiveDate(builder, effectiveDate)

def RightsAddPrice(builder, price):
    builder.PrependInt32Slot(4, price, 0)

def AddPrice(builder, price):
    RightsAddPrice(builder, price)

def RightsAddRatio(builder, ratio):
    builder.PrependInt32Slot(5, ratio, 0)

def AddRatio(builder, ratio):
    RightsAddRatio(builder, ratio)

def RightsEnd(builder):
    return builder.EndObject()

def End(builder):
    return RightsEnd(builder)
