# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AdjFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AdjFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAdjFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AdjFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AdjFrame
    def Ticker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AdjFrame
    def Adj(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Flat.AdjFrame import AdjFrame
            obj = AdjFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AdjFrame
    def AdjLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AdjFrame
    def AdjIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def AdjFrameStart(builder):
    builder.StartObject(2)

def Start(builder):
    AdjFrameStart(builder)

def AdjFrameAddTicker(builder, ticker):
    builder.PrependInt32Slot(0, ticker, 0)

def AddTicker(builder, ticker):
    AdjFrameAddTicker(builder, ticker)

def AdjFrameAddAdj(builder, adj):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(adj), 0)

def AddAdj(builder, adj):
    AdjFrameAddAdj(builder, adj)

def AdjFrameStartAdjVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAdjVector(builder, numElems: int) -> int:
    return AdjFrameStartAdjVector(builder, numElems)

def AdjFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return AdjFrameEnd(builder)
