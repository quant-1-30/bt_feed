# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RightsFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RightsFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRightsFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RightsFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RightsFrame
    def Ticker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RightsFrame
    def Rgts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Flat.RightsFrame import RightsFrame
            obj = RightsFrame()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RightsFrame
    def RgtsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RightsFrame
    def RgtsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def RightsFrameStart(builder):
    builder.StartObject(2)

def Start(builder):
    RightsFrameStart(builder)

def RightsFrameAddTicker(builder, ticker):
    builder.PrependInt32Slot(0, ticker, 0)

def AddTicker(builder, ticker):
    RightsFrameAddTicker(builder, ticker)

def RightsFrameAddRgts(builder, rgts):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rgts), 0)

def AddRgts(builder, rgts):
    RightsFrameAddRgts(builder, rgts)

def RightsFrameStartRgtsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRgtsVector(builder, numElems: int) -> int:
    return RightsFrameStartRgtsVector(builder, numElems)

def RightsFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return RightsFrameEnd(builder)
